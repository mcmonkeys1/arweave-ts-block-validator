import { BlockDTO, Tag } from '../types';
import { Poa } from './Poa';
import { Tx } from './Tx';
export declare class Block {
    nonce: Uint8Array;
    previous_block: Uint8Array;
    timestamp: bigint;
    last_retarget: bigint;
    diff: bigint;
    diffString: string;
    height: number;
    hash: Uint8Array;
    indep_hash: Uint8Array;
    txids: Uint8Array[];
    txs: Tx[];
    tx_root: Uint8Array;
    tx_tree: Uint8Array[];
    hash_list?: Uint8Array[];
    wallet_list: Uint8Array;
    reward_addr: Uint8Array;
    tags: Tag[];
    reward_pool: bigint;
    weave_size: bigint;
    block_size: bigint;
    cumulative_diff: bigint;
    hash_list_merkle: Uint8Array;
    poa: Poa;
    static createFromDTO(dto: BlockDTO): Promise<Block>;
    static getByHeight(height: number): Promise<Block>;
    static getByHash(hash: Uint8Array): Promise<Block>;
    static getCurrent(): Promise<Block>;
}
export declare const getIndepHash: (block: Block) => Promise<Uint8Array>;
export declare const generateBlockDataSegment: (block: Block) => Promise<Uint8Array>;
export declare const generateBlockDataSegmentBase: (block: Block) => Promise<Uint8Array>;
export declare const verifyBlockDepHash: (block: Block, pow: Uint8Array) => boolean;
export declare const blockFieldSizeLimit: (block: Block) => boolean;
export declare const block_verifyWeaveSize: (block: Block, prevBlock: Block) => boolean;
export declare const block_verifyBlockHashListMerkle: (block: Block, prevBlock: Block) => Promise<boolean>;
export declare const block_verifyTxRoot: (block: Block) => Promise<boolean>;
